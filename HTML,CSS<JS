#html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pong Game</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <canvas id="pongCanvas"></canvas>
    </div>
    <script src="script.js"></script>
</body>
</html>

#css

body {
    margin: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #282c34;
    color: white;
    font-family: Arial, sans-serif;
}

.container {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
}

canvas {
    background-color: #000;
    border: 2px solid #fff;
}

#js

const canvas = document.getElementById('pongCanvas');
const ctx = canvas.getContext('2d');

// Set canvas size
canvas.width = 800;
canvas.height = 500;

// Paddle properties
const paddleWidth = 10;
const paddleHeight = 100;
const playerX = 10;
const aiX = canvas.width - paddleWidth - 10;
let playerY = (canvas.height / 2) - (paddleHeight / 2);
let aiY = (canvas.height / 2) - (paddleHeight / 2);
const paddleSpeed = 5;

// Ball properties
const ballSize = 10;
let ballX = canvas.width / 2;
let ballY = canvas.height / 2;
let ballSpeedX = 4;
let ballSpeedY = 4;

// Score
let playerScore = 0;
let aiScore = 0;

// Player movement controls
let upArrowPressed = false;
let downArrowPressed = false;

function drawRect(x, y, width, height, color) {
    ctx.fillStyle = color;
    ctx.fillRect(x, y, width, height);
}

function drawCircle(x, y, radius, color) {
    ctx.fillStyle = color;
    ctx.beginPath();
    ctx.arc(x, y, radius, 0, Math.PI * 2);
    ctx.closePath();
    ctx.fill();
}

function drawNet() {
    for (let i = 0; i <= canvas.height; i += 15) {
        drawRect(canvas.width / 2 - 1, i, 2, 10, 'white');
    }
}

function drawText(text, x, y) {
    ctx.fillStyle = 'white';
    ctx.font = '20px Arial';
    ctx.fillText(text, x, y);
}

function resetBall() {
    ballX = canvas.width / 2;
    ballY = canvas.height / 2;
    ballSpeedX = -ballSpeedX;
}

function update() {
    // Move the ball
    ballX += ballSpeedX;
    ballY += ballSpeedY;

    // Ball collision with top and bottom
    if (ballY + ballSize > canvas.height || ballY - ballSize < 0) {
        ballSpeedY = -ballSpeedY;
    }

    // Ball collision with paddles
    if (ballX - ballSize < playerX + paddleWidth && ballY > playerY && ballY < playerY + paddleHeight) {
        ballSpeedX = -ballSpeedX;
    }

    if (ballX + ballSize > aiX && ballY > aiY && ballY < aiY + paddleHeight) {
        ballSpeedX = -ballSpeedX;
    }

    // Ball goes out of bounds
    if (ballX - ballSize < 0) {
        aiScore++;
        resetBall();
    }

    if (ballX + ballSize > canvas.width) {
        playerScore++;
        resetBall();
    }

    // Move AI paddle
    if (aiY + paddleHeight / 2 < ballY) {
        aiY += paddleSpeed;
    } else {
        aiY -= paddleSpeed;
    }

    // Move player paddle with arrow keys
    if (upArrowPressed && playerY > 0) {
        playerY -= paddleSpeed;
    }
    if (downArrowPressed && playerY < canvas.height - paddleHeight) {
        playerY += paddleSpeed;
    }
}

function render() {
    // Clear the canvas
    drawRect(0, 0, canvas.width, canvas.height, 'black');

    // Draw the net
    drawNet();

    // Draw paddles
    drawRect(playerX, playerY, paddleWidth, paddleHeight, 'white');
    drawRect(aiX, aiY, paddleWidth, paddleHeight, 'white');

    // Draw the ball
    drawCircle(ballX, ballY, ballSize, 'white');

    // Draw the scores
    drawText(playerScore, canvas.width / 4, 30);
    drawText(aiScore, 3 * canvas.width / 4, 30);
}

function gameLoop() {
    update();
    render();
    requestAnimationFrame(gameLoop);
}

// Event listeners for keyboard controls
window.addEventListener('keydown', (event) => {
    switch (event.key) {
        case 'ArrowUp':
            upArrowPressed = true;
            break;
        case 'ArrowDown':
            downArrowPressed = true;
            break;
    }
});

window.addEventListener('keyup', (event) => {
    switch (event.key) {
        case 'ArrowUp':
            upArrowPressed = false;
            break;
        case 'ArrowDown':
            downArrowPressed = false;
            break;
    }
});

// Start the game
gameLoop();
